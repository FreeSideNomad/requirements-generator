name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build CSS
      run: npm run build-css

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python
      run: uv python install

    - name: Install Python dependencies
      run: uv sync --all-extras --dev

    - name: Run tests
      env:
        DATABASE_URL: sqlite+aiosqlite:///./test.db
        SECRET_KEY: test-secret-key-for-testing-only
        MOCK_OPENAI: true
      run: |
        uv run pytest tests/ -v
        npx playwright install --with-deps
        npx playwright test --reporter=github

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        # Generate changelog from git commits
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.version }}
        body: |
          ## Changes in ${{ steps.changelog.outputs.version }}

          ${{ steps.changelog.outputs.changelog }}

          ## Features
          - Multi-tenant SaaS requirements management platform
          - AI-powered requirements assistance with mock OpenAI service
          - Domain-driven design architecture
          - Comprehensive authentication and authorization
          - Modern web interface with HTMX and Alpine.js
          - End-to-end testing with Playwright

          ## Installation

          1. Clone the repository
          2. Install dependencies: `uv sync --all-extras --dev`
          3. Install Node dependencies: `npm ci`
          4. Build CSS: `npm run build-css`
          5. Run development server: `uv run uvicorn src.main_dev:app --reload`

          ## Docker

          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.changelog.outputs.version }}
          ```
        draft: false
        prerelease: ${{ contains(steps.changelog.outputs.version, '-') }}

  build-and-push-release:
    needs: create-release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          ghcr.io/${{ github.repository }}:latest
        labels: |
          org.opencontainers.image.title=Requirements Generator
          org.opencontainers.image.description=Multi-tenant SaaS requirements management platform
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max