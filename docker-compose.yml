version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: requirements_postgres
    environment:
      POSTGRES_DB: requirements_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - requirements_network

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: requirements_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - requirements_network

  # FastAPI Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: requirements_app
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/requirements_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
      - RELOAD=true
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - requirements_network
    command: uv run uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  # Background Task Worker (Celery)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: requirements_worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/requirements_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ENVIRONMENT=development
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - requirements_network
    command: uv run celery -A src.shared.tasks worker --loglevel=info --concurrency=2

  # Celery Flower (Task Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: requirements_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - worker
    networks:
      - requirements_network
    command: uv run celery -A src.shared.tasks flower --port=5555

  # Frontend Build Tool (Node.js for Tailwind CSS)
  frontend:
    image: node:18-alpine
    container_name: requirements_frontend
    working_dir: /app
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    command: npm run dev
    networks:
      - requirements_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  node_modules:
    driver: local

networks:
  requirements_network:
    driver: bridge

# Development overrides
# Use: docker-compose -f docker-compose.yml -f docker-compose.override.yml up