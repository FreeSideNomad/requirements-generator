[project]
name = "requirements-generator"
version = "1.0.0"
description = "AI-powered requirements gathering platform using FastAPI + Pydantic"
authors = [
    {name = "Requirements Generator Team"},
]
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["fastapi", "ai", "requirements", "domain-driven-design", "multi-tenant"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
]

dependencies = [
    # FastAPI and core dependencies - using latest versions
    "fastapi[all]",
    "uvicorn[standard]",
    "pydantic[email]",
    "pydantic-settings",
    "python-multipart",
    # Database
    "asyncpg",
    "aiosqlite",
    "sqlalchemy[asyncio]",
    "alembic",
    # Redis and session management
    "redis[hiredis]",
    # Authentication and security
    "python-jose[cryptography]",
    "passlib[bcrypt]",
    # AI Integration
    "openai",
    "tiktoken",
    # Background tasks
    "celery[redis]",
    # Template rendering
    "jinja2",
    # HTTP client
    "httpx",
    # Utilities
    "python-slugify",
    "structlog",
    "rich",
    # Monitoring
    "prometheus-fastapi-instrumentator",
    "sse-starlette>=3.0.2",
]

[project.optional-dependencies]
dev = [
    # Development and testing - using latest versions
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "factory-boy",
    "faker",

    # Code quality
    "black",
    "isort",
    "flake8",
    "mypy",
    "bandit",
    "pre-commit",
]

# Remove project.scripts for now - will use uv run commands instead

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "asyncpg.*",
    "openai.*",
    "tiktoken.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]
